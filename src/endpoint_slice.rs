//! This module contains `k8s_openapi::api::discovery::v1::EndpointSlice` utility functions
use crate::EndpointSlice;

use k8s_openapi::Metadata;
use kube::ResourceExt;

/// Returns true if and only if at least one of the `EndpointSlice`'s
///  `endpoints[].conditions.ready` evaluate to `true`
///  Always return false elsewise.
pub fn endpointslice_is_ready(endpoint_slice: &EndpointSlice) -> bool {
	endpoint_slice
		.endpoints
		.iter()
		.flat_map(|e| &e.conditions)
		.filter_map(|c| c.ready)
		.any(|is_ready| is_ready)
}

/// Returns true if and only if the `EndpointSlice`'s `.metadata()`
///  refers to a `k8s_openapi::api::core::v1::Service` of the same name as the `app` label.
///  Always returns false elsewise.
pub fn has_service_owner(endpoint_slice: &EndpointSlice, app_name: &str) -> bool {
	let Some(ref owners) = endpoint_slice.metadata().owner_references else {
		// We only care about `EndpointSlice`s that've owner references to a `Service`
		return false;
	};
	owners
		.iter()
		.any(|o| o.api_version == "v1" && o.kind == "Service" && o.name.as_str() == app_name)
}

/// Helper function to get the `team` and `app` labels from a K8s resource
pub fn extract_team_and_app_labels(
	endpoint_slice: &EndpointSlice,
) -> (Option<String>, Option<String>) {
	// We expect the:
	//   - team's given app name
	//   - team's name
	//  to be present in this label.
	// As is customary for things generated by naiserator/NAIS apps

	return (
		endpoint_slice.labels().get("app").cloned(),
		endpoint_slice.labels().get("team").cloned(),
	);
}
